AWSTemplateFormatVersion: "2010-09-09"

Description: |
  This SAM template will automate a FAST channel
  

Transform: "AWS::Serverless-2016-10-31"

Parameters:
  AdServerUrl:
    Type: String
    Default: "https://yb9ebx7p96.execute-api.us-west-2.amazonaws.com/prod/v1?maxd=[session.avail_duration_secs]&[player_params.my_ads_params]"
    Description: The Ad Decision Server Url. This is used to create a Sample MediaTailor Ad Insertion Configuration. Default is a dummy AdServer that responds with sample ad creatives. 

  EmailAddress:
    Type: String
    Description: The email address used for notifications

  S3BucketName:
    Type: String
    AllowedPattern: (?!(^xn--|.+-s3alias$))^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$
    ConstraintDescription: "Bucket Name must follow S3 naming constraints. https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html"
    Description: Name of the S3 Bucket created for video processing. This will generate 2 buckets with a suffix derived from the StackId

Resources:
  Boto3Layer:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.9
      ContentUri: boto3/

  CrHelperLayer:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.9
      ContentUri: crhelper/

  MediaConvertCompleteRuleRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaConvertFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaConvertSlatesCustomResourceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaConvertTranscodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - mediaconvert.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaPackageFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        
  MediaPackageReadS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: mediapackage.amazonaws.com
            Action: "sts:AssumeRole"

  MediaPackageReadSecretsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: mediapackage.amazonaws.com
            Action: "sts:AssumeRole"

  MediaTailorChannelCustomResourceFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaTailorFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  MediaTailorSourceLocationCustomResourceFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ProcessMediaStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"

  SNSTopic:
    Type: "AWS::SNS::Topic"

  EventBridgeToToSnsPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sns:Publish"
            Resource: !Ref SNSTopic
      Topics:
        - Ref: SNSTopic

  MediaConvertPreset1080HEVC5800:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "1920x1080 resolution at 5800Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset1080HEVC5800"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 5800000
              QvbrSettings:
                QvbrQualityLevel: 9
              RateControlMode: QVBR
          Height: 1080
          Width: 1920

  MediaConvertPreset234AVC145:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "416x234 resolution at 145Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset234AVC145"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 145000
              QvbrSettings:
                QvbrQualityLevel: 4
              RateControlMode: QVBR
          Height: 234
          Width: 416

  MediaConvertPreset360AVC365:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "640x360 resolution at 365Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset360AVC365"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 365000
              QvbrSettings:
                QvbrQualityLevel: 4
              RateControlMode: QVBR
          Height: 360
          Width: 640

  MediaConvertPreset360HEVC145:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "640x360 resolution at 145Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset360HEVC145"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 145000
              QvbrSettings:
                QvbrQualityLevel: 4
              RateControlMode: QVBR
          Height: 360
          Width: 640

  MediaConvertPreset432AVC1100:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "768x432 resolution at 1100Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset432AVC1100"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 1100000
              QvbrSettings:
                QvbrQualityLevel: 5
              RateControlMode: QVBR
          Height: 432
          Width: 768

  MediaConvertPreset432AVC730:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "768x432 resolution at 730Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset432AVC730"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 730000
              QvbrSettings:
                QvbrQualityLevel: 5
              RateControlMode: QVBR
          Height: 432
          Width: 768

  MediaConvertPreset432HEVC300:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "768x432 resolution at 300Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset432HEVC300"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 300000
              QvbrSettings:
                QvbrQualityLevel: 4
              RateControlMode: QVBR
          Height: 432
          Width: 768

  MediaConvertPreset540AVC2000:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "960x540 resolution at 2000Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset540AVC2000"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 2000000
              QvbrSettings:
                QvbrQualityLevel: 6
              RateControlMode: QVBR
          Height: 540
          Width: 960

  MediaConvertPreset540HEVC1600:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "960x540 resolution at 1600Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset540HEVC1600"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 1600000
              QvbrSettings:
                QvbrQualityLevel: 5
              RateControlMode: QVBR
          Height: 540
          Width: 960

  MediaConvertPreset540HEVC600:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "960x540 resolution at 600Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset540HEVC600"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 600000
              QvbrSettings:
                QvbrQualityLevel: 5
              RateControlMode: QVBR
          Height: 540
          Width: 960

  MediaConvertPreset540HEVC900:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "960x540 resolution at 900Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset540HEVC900"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 900000
              QvbrSettings:
                QvbrQualityLevel: 5
              RateControlMode: QVBR
          Height: 540
          Width: 960

  MediaConvertPreset720AVC3000:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "1280x720 resolution at 3000Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset720AVC3000"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 3000000
              QvbrSettings:
                QvbrQualityLevel: 7
              RateControlMode: QVBR
          Height: 720
          Width: 1280

  MediaConvertPreset720AVC4500:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "1280x720 resolution at 4500Kbit/s in AVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset720AVC4500"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_264
            H264Settings:
              MaxBitrate: 4500000
              QvbrSettings:
                QvbrQualityLevel: 8
              RateControlMode: QVBR
          Height: 720
          Width: 1280

  MediaConvertPreset720HEVC2400:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "1280x720 resolution at 2400Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset720HEVC2400"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 2400000
              QvbrSettings:
                QvbrQualityLevel: 6
              RateControlMode: QVBR
          Height: 720
          Width: 1280

  MediaConvertPreset720HEVC3400:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "1280x720 resolution at 3400Kbit/s in HEVC"
      Name: !Sub "${AWS::StackName}-MediaConvertPreset720HEVC3400"
      SettingsJson:
        ContainerSettings:
          Container: M3U8
        VideoDescription:
          CodecSettings:
            Codec: H_265
            H265Settings:
              MaxBitrate: 3400000
              QvbrSettings:
                QvbrQualityLevel: 7
              RateControlMode: QVBR
          Height: 720
          Width: 1280

  MediaConvertPresetAAC192:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "192Kbit/s in AAC"
      Name: !Sub "${AWS::StackName}-MediaConvertPresetAAC192"
      SettingsJson:
        AudioDescriptions:
          - AudioSourceName: Audio Selector 1
            AudioTypeControl: FOLLOW_INPUT
            CodecSettings:
              AacSettings:
                AudioDescriptionBroadcasterMix: NORMAL
                Bitrate: 192000
                CodecProfile: LC
                CodingMode: CODING_MODE_2_0
                RateControlMode: CBR
                RawFormat: NONE
                SampleRate: 48000
                Specification: MPEG4
              Codec: AAC
            LanguageCodeControl: FOLLOW_INPUT
        ContainerSettings:
          Container: M3U8
          M3u8Settings:
            {}

  MediaConvertPresetAAC64:
    Type: "AWS::MediaConvert::Preset"
    Properties:
      Category: !Ref "AWS::StackName"
      Description: "64Kbit/s in AAC"
      Name: !Sub "${AWS::StackName}-MediaConvertPresetAAC64"
      SettingsJson:
        AudioDescriptions:
          - AudioSourceName: Audio Selector 1
            AudioTypeControl: FOLLOW_INPUT
            CodecSettings:
              AacSettings:
                AudioDescriptionBroadcasterMix: NORMAL
                Bitrate: 64000
                CodecProfile: LC
                CodingMode: CODING_MODE_2_0
                RateControlMode: CBR
                RawFormat: NONE
                SampleRate: 48000
                Specification: MPEG4
              Codec: AAC
            LanguageCodeControl: FOLLOW_INPUT
        ContainerSettings:
          Container: M3U8
          M3u8Settings:
            {}

  MediaConvertQueue:
    Type: "AWS::MediaConvert::Queue"
    Properties:
      Name: !Sub "${AWS::StackName}-Queue"

  MediaTailorChannelCustomResourceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaTailorChannelCustomResource/
      Environment:
        Variables:
          LogLevel: INFO
      Handler: app.lambda_handler
      Layers:
        - Ref: CrHelperLayer
      MemorySize: 128
      Role: !GetAtt MediaTailorChannelCustomResourceFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30

  MediaTailorChannelCustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "mediapackage-vod:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "mediatailor:*"
            Resource:
              - "*"
      PolicyName: !Sub "${AWS::StackName}-MediaTailorSourceLocationCustomResourcePolicy"
      Roles:
        - Ref: MediaTailorChannelCustomResourceFunctionRole

  MediaTailorFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "events:PutEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
          - Effect: Allow
            Action:
              - "mediapackage-vod:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "mediatailor:*"
            Resource:
              - "*"
      PolicyName: !Sub "${AWS::StackName}-MediaTailorFunctionPolicy"
      Roles:
        - Ref: MediaTailorFunctionRole

  MediaTailorSourceLocationCustomResourceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaTailorSourceLocationCustomResource/
      Environment:
        Variables:
          LogLevel: INFO
      Handler: app.lambda_handler
      Layers:
        - Ref: CrHelperLayer
      MemorySize: 128
      Role: !GetAtt MediaTailorSourceLocationCustomResourceFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30

  MediaTailorSourceLocationCustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "mediatailor:*"
            Resource:
              - "*"
      PolicyName: !Sub "${AWS::StackName}-MediaTailorSourceLocationCustomResourcePolicy"
      Roles:
        - Ref: MediaTailorSourceLocationCustomResourceFunctionRole

  NotificationRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventBusName: default
      EventPattern:
        detail-type:
          - Playback URLs
        source:
          - Ref: "AWS::StackName"
      Name: !Sub "${AWS::StackName}-NotificationRule"
      Targets:
        - Arn: !Ref SNSTopic
          Id: !Sub "${AWS::StackName}-SNSTopicTarget"
          InputPath: $.detail

  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Ref EmailAddress
      Protocol: email
      TopicArn: !Ref SNSTopic

  VideoDestinationBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-output-"
        - - Ref: S3BucketName
          - "Fn::Select":
              - 0
              - "Fn::Split":
                  - "-"
                  - "Fn::Select":
                      - 2
                      - "Fn::Split":
                          - /
                          - Ref: "AWS::StackId"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  VideoSourceBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-input-"
        - - Ref: S3BucketName
          - "Fn::Select":
              - 0
              - "Fn::Split":
                  - "-"
                  - "Fn::Select":
                      - 2
                      - "Fn::Split":
                          - /
                          - Ref: "AWS::StackId"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  MediaConvertSlatesCustomResourceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaConvertSlatesCustomResource/
      Environment:
        Variables:
          LogLevel: INFO
      Handler: app.lambda_handler
      Layers:
        - Ref: Boto3Layer
        - Ref: CrHelperLayer
      MemorySize: 128
      Role: !GetAtt MediaConvertSlatesCustomResourceRole.Arn
      Runtime: python3.9
      Timeout: 300

  MediaPackageFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "events:PutEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - "Fn::Sub": "arn:${AWS::Partition}:s3:::${VideoDestinationBucket}/*"
          - Effect: Allow
            Action:
              - "mediapackage-vod:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - "Fn::GetAtt":
                  - MediaPackageReadS3Role
                  - Arn
      PolicyName: !Sub "${AWS::StackName}-MediaPackageFunctionPolicy"
      Roles:
        - Ref: MediaPackageFunctionRole

  MediaTailorKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Id: key-default-1
        Statement:
          - Sid: Enable MediaTailor Channel Assembly access to decrypt MediaPackageSecret
            Effect: Allow
            Principal:
              AWS: !GetAtt MediaTailorSourceLocationCustomResourceFunctionRole.Arn
            Action: "kms:CreateGrant"
            Resource: "*"
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow access through AWS Secrets Manager for all principals in the account that are authorized to use AWS Secrets Manager
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:CreateGrant"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Ref "AWS::AccountId"
                "kms:ViaService": !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
          - Sid: Allow access through AWS Secrets Manager for all principals in the account that are authorized to use AWS Secrets Manager
            Effect: Allow
            Principal:
              AWS: "*"
            Action: "kms:GenerateDataKey*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Ref "AWS::AccountId"
              StringLike:
                "kms:ViaService": secretsmanager.*.amazonaws.com
          - Sid: Allow direct access to key metadata to the account
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:Describe*"
              - "kms:Get*"
              - "kms:List*"
              - "kms:RevokeGrant"
            Resource: "*"
        Version: "2012-10-17"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false

  MediaPackageReadS3Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetBucketLocation"
              - "s3:GetBucketRequestPayment"
            Resource:
              - "Fn::GetAtt":
                  - VideoDestinationBucket
                  - Arn
              - "Fn::Sub": ${VideoDestinationBucket.Arn}/*
      PolicyName: !Sub "${AWS::StackName}-MediaPackageReadS3Policy"
      Roles:
        - Ref: MediaPackageReadS3Role

  MediaConvertFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "events:PutEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - "Fn::Sub": ${VideoSourceBucket.Arn}/*
          - Effect: Allow
            Action:
              - "mediaconvert:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - "Fn::GetAtt":
                  - MediaConvertTranscodeRole
                  - Arn
      PolicyName: !Sub "${AWS::StackName}-MediaConvertFunctionPolicy"
      Roles:
        - Ref: MediaConvertFunctionRole

  MediaConvertSlatesCustomResourceFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - "Fn::Sub": ${VideoDestinationBucket.Arn}/*
              - "Fn::GetAtt":
                  - VideoDestinationBucket
                  - Arn
          - Effect: Allow
            Action:
              - "lambda:*"
            Resource:
              - "Fn::GetAtt":
                  - MediaConvertSlatesCustomResourceRole
                  - Arn
          - Effect: Allow
            Action:
              - "mediaconvert:*"
              - "mediapackage-vod:*"
              - "mediatailor:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - "Fn::GetAtt":
                  - MediaConvertTranscodeRole
                  - Arn
      PolicyName: !Sub "${AWS::StackName}-MediaConvertSlatesCustomResourceFunctionPolicy"
      Roles:
        - Ref: MediaConvertSlatesCustomResourceRole

  MediaPackageAccessSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      KmsKeyId: !GetAtt MediaTailorKMSKey.Arn
      SecretString: !Sub
        - "{\"MediaPackageCDNIdentifier\":\"${Secret}\"}"
        - Secret: !Select
            - 2
            - "Fn::Split":
                - /
                - Ref: "AWS::StackId"

  MediaConvertTranscodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "events:PutEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - "Fn::Sub": ${VideoSourceBucket.Arn}/*
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource:
              - "Fn::Sub": ${VideoDestinationBucket.Arn}/*
          - Effect: Allow
            Action: "execute-api:Invoke"
            Resource: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*"
      PolicyName: !Sub "${AWS::StackName}-MediaConvertTranscodePolicy"
      Roles:
        - Ref: MediaConvertTranscodeRole
        - Ref: MediaConvertSlatesCustomResourceRole

  MediaTailorSecretAccessPolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      ResourcePolicy:
        Statement:
          - Effect: Allow
            Principal:
              Service: mediatailor.amazonaws.com
            Action: "secretsmanager:*"
            Resource: !Ref MediaPackageAccessSecret
          - Effect: Allow
            Principal:
              AWS: !GetAtt MediaTailorSourceLocationCustomResourceFunctionRole.Arn
            Action: "secretsmanager:*"
            Resource: !Ref MediaPackageAccessSecret
          - Effect: Allow
            Principal:
              AWS: !GetAtt MediaPackageReadSecretsRole.Arn
            Action: "secretsmanager:*"
            Resource: !Ref MediaPackageAccessSecret
        Version: "2012-10-17"
      SecretId: !Ref MediaPackageAccessSecret

  MediaPackagePackagingGroup:
    Type: "AWS::MediaPackage::PackagingGroup"
    DependsOn:
      - MediaTailorKMSKey
      - MediaPackageAccessSecret
      - MediaPackageReadSecretsPolicy
      - MediaPackageReadSecretsRole
    Properties:
      Authorization:
        CdnIdentifierSecret: !Ref MediaPackageAccessSecret
        SecretsRoleArn: !GetAtt MediaPackageReadSecretsRole.Arn
      Id: !Sub "${AWS::StackName}-PackagingGroup"

  MediaPackageReadSecretsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:*"
            Resource:
              - Ref: MediaPackageAccessSecret
          - Effect: Allow
            Action:
              - "secretsmanager:ListSecrets"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - "Fn::GetAtt":
                  - MediaPackageReadSecretsRole
                  - Arn
      PolicyName: !Sub "${AWS::StackName}-MediaPackageReadSecretsPolicy"
      Roles:
        - Ref: MediaPackageReadSecretsRole

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: "08627262-05a9-4f76-9ded-b50ca2e3a84f"
          OriginRequestPolicyId: "775133bc-15f2-49f9-abea-afb2e0bf67d2"
          ResponseHeadersPolicyId: "5cc3b908-e619-4b99-88e5-2cf7f45965bd"
          TargetOriginId: MediaPackage
          ViewerProtocolPolicy: allow-all
        Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
            DomainName: !Select
              - 1
              - "Fn::Split":
                  - "https://"
                  - "Fn::GetAtt":
                      - MediaPackagePackagingGroup
                      - DomainName
            Id: MediaPackage
            OriginCustomHeaders:
              - HeaderName: X-MediaPackage-CDNIdentifier
                HeaderValue: !Select
                  - 2
                  - "Fn::Split":
                      - /
                      - Ref: "AWS::StackId"

  MediaPackagePackagingConfigurationCmaf:
    Type: "AWS::MediaPackage::PackagingConfiguration"
    Properties:
      CmafPackage:
        HlsManifests:
          - ManifestName: cmaf
        SegmentDurationSeconds: 6
      Id: !Sub "${AWS::StackName}-Cmaf"
      PackagingGroupId: !Ref MediaPackagePackagingGroup

  MediaPackagePackagingConfigurationDash:
    Type: "AWS::MediaPackage::PackagingConfiguration"
    Properties:
      DashPackage:
        DashManifests:
          - ManifestName: dash
        SegmentDurationSeconds: 6
      Id: !Sub "${AWS::StackName}-Dash"
      PackagingGroupId: !Ref MediaPackagePackagingGroup

  MediaPackagePackagingConfigurationHls:
    Type: "AWS::MediaPackage::PackagingConfiguration"
    Properties:
      HlsPackage:
        HlsManifests:
          - ManifestName: hls
        SegmentDurationSeconds: 6
      Id: !Sub "${AWS::StackName}-Hls"
      PackagingGroupId: !Ref MediaPackagePackagingGroup

  MediaTailorPlaybackConfigurationVod:
    Type: "AWS::MediaTailor::PlaybackConfiguration"
    Properties:
      AdDecisionServerUrl: !Ref AdServerUrl
      Name: !Sub "${AWS::StackName}-PlaybackConfiguration-Vod"
      VideoContentSourceUrl: !GetAtt MediaPackagePackagingGroup.DomainName

  MediaTailorSourceLocation:
    Type: "Custom::MediaTailorSourceLocation"
    DependsOn:
      - "MediaTailorSourceLocationCustomResourceFunctionRole"
      - "MediaTailorSourceLocationCustomResourcePolicy"
    Properties:
      CloudFrontDistribution:
        DomainName: !GetAtt CloudFrontDistribution.DomainName
        Id: !GetAtt CloudFrontDistribution.Id
      MediaPackageAccessSecretArn: !Ref MediaPackageAccessSecret
      MediaPackagePackagingGroup:
        DomainName: !GetAtt MediaPackagePackagingGroup.DomainName
        Id: !Ref MediaPackagePackagingGroup
      Name: !Sub "${AWS::StackName}-MediaTailorSourceLocation"
      ServiceToken: !GetAtt MediaTailorSourceLocationCustomResourceFunction.Arn
      StackName: !Ref "AWS::StackName"

  MediaTailorChannel:
    Type: "Custom::MediaTailorChannel"
    DependsOn:
      - "MediaTailorChannelCustomResourceFunctionRole"
      - "MediaTailorChannelCustomResourcePolicy"
    Properties:
      CloudFrontDistribution:
        DomainName: !GetAtt CloudFrontDistribution.DomainName
        Id: !GetAtt CloudFrontDistribution.Id
      MediaPackagePackagingGroup:
        DomainName: !GetAtt MediaPackagePackagingGroup.DomainName
        Id: !Ref MediaPackagePackagingGroup
      Name: !Sub "${AWS::StackName}-MediaTailorSampleChannel"
      ServiceToken: !GetAtt MediaTailorChannelCustomResourceFunction.Arn
      StackName: !Ref "AWS::StackName"

  MediaPackageFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaPackage/
      Environment:
        Variables:
          LogLevel: INFO
          MediaPackagePackagingGroupId: !Ref MediaPackagePackagingGroup
          MediaPackageReadS3RoleArn: !GetAtt MediaPackageReadS3Role.Arn
          MediaTailorPlaybackConfigurationVodDash: !GetAtt MediaTailorPlaybackConfigurationVod.DashConfiguration.ManifestEndpointPrefix
          MediaTailorPlaybackConfigurationVodHls: !GetAtt MediaTailorPlaybackConfigurationVod.HlsConfiguration.ManifestEndpointPrefix
          StackId: !Ref "AWS::StackId"
          StackName: !Ref "AWS::StackName"
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                queue:
                  - "Fn::GetAtt":
                      - MediaConvertQueue
                      - Arn
                status:
                  - COMPLETE
              source:
                - aws.mediaconvert
      Handler: app.lambda_handler
      MemorySize: 128
      Role: !GetAtt MediaPackageFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30

  MediaTailorFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaTailor/
      Environment:
        Variables:
          LogLevel: INFO
          MediaTailorSourceLocation: !Ref MediaTailorSourceLocation
          StackId: !Ref "AWS::StackId"
          StackName: !Ref "AWS::StackName"
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                event:
                  - VodAssetPlayable
              detail-type:
                - MediaPackage Input Notification
              source:
                - aws.mediapackage
      Handler: app.lambda_handler
      MemorySize: 128
      Role: !GetAtt MediaTailorFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30

  MediaTailorPlaybackConfigurationSampleChannel:
    Type: "AWS::MediaTailor::PlaybackConfiguration"
    Properties:
      AdDecisionServerUrl: !Ref AdServerUrl
      Name: !Sub "${AWS::StackName}-PlaybackConfiguration-SampleChannel"
      VideoContentSourceUrl: !GetAtt MediaTailorChannel.PlaybackBaseUrl

  MediaConvertJobTemplate:
    Type: "AWS::MediaConvert::JobTemplate"
    Properties:
      AccelerationSettings:
        Mode: PREFERRED
      Category: !Ref "AWS::StackName"
      Description: !Sub "Job template for ${AWS::StackName}"
      Name: !Sub "${AWS::StackName}-MediaConvertJobTemplate"
      Queue: !GetAtt MediaConvertQueue.Arn
      SettingsJson:
        Inputs:
          - AudioSelectors:
              Audio Selector 1:
                DefaultSelection: DEFAULT
            CaptionSelectors:
              Captions Selector 1:
                SourceSettings:
                  EmbeddedSourceSettings:
                    {}
                  SourceType: EMBEDDED
            TimecodeSource: ZEROBASED
            VideoSelector:
              {}
        OutputGroups:
          - Name: Apple HLS
            CustomName: Output for MediaPackage
            OutputGroupSettings:
              Type: HLS_GROUP_SETTINGS
              HlsGroupSettings:
                Destination: !Sub "s3://${VideoDestinationBucket}/"
                MinSegmentLength: 0
                SegmentLength: 6
            Outputs:
              - NameModifier: _1
                Preset: !Ref MediaConvertPreset1080HEVC5800
              - NameModifier: _2
                Preset: !Ref MediaConvertPreset720AVC4500
              - NameModifier: _3
                Preset: !Ref MediaConvertPreset720HEVC3400
              - NameModifier: _4
                Preset: !Ref MediaConvertPreset720AVC3000
              - NameModifier: _5
                Preset: !Ref MediaConvertPreset720HEVC2400
              - NameModifier: _6
                Preset: !Ref MediaConvertPreset540AVC2000
              - NameModifier: _7
                Preset: !Ref MediaConvertPreset540HEVC1600
              - NameModifier: _8
                Preset: !Ref MediaConvertPreset432AVC1100
              - NameModifier: _9
                Preset: !Ref MediaConvertPreset540HEVC900
              - NameModifier: _10
                Preset: !Ref MediaConvertPreset432AVC730
              - NameModifier: _11
                Preset: !Ref MediaConvertPreset540HEVC600
              - NameModifier: _12
                Preset: !Ref MediaConvertPreset360AVC365
              - NameModifier: _13
                Preset: !Ref MediaConvertPreset432HEVC300
              - NameModifier: _14
                Preset: !Ref MediaConvertPreset234AVC145
              - NameModifier: _15
                Preset: !Ref MediaConvertPreset360HEVC145
              - NameModifier: _16
                Preset: !Ref MediaConvertPresetAAC192
              - NameModifier: _17
                Preset: !Ref MediaConvertPresetAAC64
        TimecodeConfig:
          Source: ZEROBASED

  MediaConvertFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Architectures:
        - arm64
      CodeUri: MediaConvert/
      Environment:
        Variables:
          LogLevel: INFO
          MediaConvertJobTemplate: !Ref MediaConvertJobTemplate
          MediaConvertQueue: !GetAtt MediaConvertQueue.Arn
          MediaConvertTranscodeRoleArn: !GetAtt MediaConvertTranscodeRole.Arn
          StackId: !Ref "AWS::StackId"
          StackName: !Ref "AWS::StackName"
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                bucket:
                  name:
                    - Ref: VideoSourceBucket
              detail-type:
                - Object Created
              source:
                - aws.s3
      Handler: app.lambda_handler
      Layers:
        - Ref: Boto3Layer
      MemorySize: 128
      Role: !GetAtt MediaConvertFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30

  MediaConvertSlate15s:
    Type: "Custom::MediaConvertSlates"
    DependsOn:
      - MediaPackageFunction
      - MediaTailorFunction
      - MediaTailorSourceLocationCustomResourceFunction
      - MediaTailorSourceLocationCustomResourcePolicy
      - MediaConvertSlatesCustomResourceFunctionPolicy
      - MediaConvertSlatesCustomResourceRole
      - MediaTailorSourceLocation
      - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name: !Ref MediaConvertJobTemplate
      MediaConvertTranscodeRoleArn: !GetAtt MediaConvertTranscodeRole.Arn
      MediaPackagePackagingGroup:
        DomainName: !GetAtt MediaPackagePackagingGroup.DomainName
        Id: !Ref MediaPackagePackagingGroup
      ServiceToken: !GetAtt MediaConvertSlatesCustomResourceFunction.Arn
      SlateDurationInMillis: 15000
      StackName: !Ref "AWS::StackName"
      VideoDestinationBucket: !Ref VideoDestinationBucket

  MediaConvertSlate20s:
    Type: "Custom::MediaConvertSlates"
    DependsOn:
      - MediaPackageFunction
      - MediaTailorFunction
      - MediaTailorSourceLocationCustomResourceFunction
      - MediaTailorSourceLocationCustomResourcePolicy
      - MediaConvertSlatesCustomResourceFunctionPolicy
      - MediaConvertSlatesCustomResourceRole
      - MediaTailorSourceLocation
      - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name: !Ref MediaConvertJobTemplate
      MediaConvertTranscodeRoleArn: !GetAtt MediaConvertTranscodeRole.Arn
      MediaPackagePackagingGroup:
        DomainName: !GetAtt MediaPackagePackagingGroup.DomainName
        Id: !Ref MediaPackagePackagingGroup
      ServiceToken: !GetAtt MediaConvertSlatesCustomResourceFunction.Arn
      SlateDurationInMillis: 20000
      StackName: !Ref "AWS::StackName"
      VideoDestinationBucket: !Ref VideoDestinationBucket

  MediaConvertSlate25s:
    Type: "Custom::MediaConvertSlates"
    DependsOn:
      - MediaPackageFunction
      - MediaTailorFunction
      - MediaTailorSourceLocationCustomResourceFunction
      - MediaTailorSourceLocationCustomResourcePolicy
      - MediaConvertSlatesCustomResourceFunctionPolicy
      - MediaConvertSlatesCustomResourceRole
      - MediaTailorSourceLocation
      - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name: !Ref MediaConvertJobTemplate
      MediaConvertTranscodeRoleArn: !GetAtt MediaConvertTranscodeRole.Arn
      MediaPackagePackagingGroup:
        DomainName: !GetAtt MediaPackagePackagingGroup.DomainName
        Id: !Ref MediaPackagePackagingGroup
      ServiceToken: !GetAtt MediaConvertSlatesCustomResourceFunction.Arn
      SlateDurationInMillis: 25000
      StackName: !Ref "AWS::StackName"
      VideoDestinationBucket: !Ref VideoDestinationBucket
  
  MediaConvertSlate30s:
    Type: "Custom::MediaConvertSlates"
    DependsOn:
      - MediaPackageFunction
      - MediaTailorFunction
      - MediaTailorSourceLocationCustomResourceFunction
      - MediaTailorSourceLocationCustomResourcePolicy
      - MediaConvertSlatesCustomResourceFunctionPolicy
      - MediaConvertSlatesCustomResourceRole
      - MediaTailorSourceLocation
      - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name: !Ref MediaConvertJobTemplate
      MediaConvertTranscodeRoleArn: !GetAtt MediaConvertTranscodeRole.Arn
      ServiceToken: !GetAtt MediaConvertSlatesCustomResourceFunction.Arn
      SlateDurationInMillis: 30000
      StackName: !Ref "AWS::StackName"
      VideoDestinationBucket: !Ref VideoDestinationBucket

Outputs:
  SampleChannelPlaybackCmafPlaybackUrl:
    Description: Sample Channel PlaybackURL for (hls) CMAF SourceGroup
    Value: !Sub "${MediaTailorPlaybackConfigurationSampleChannel.HlsConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Cmaf.m3u8"

  SampleChannelPlaybackDashPlaybackUrl:
    Description: Sample Channel PlaybackURL for DASH SourceGroup
    Value: !Sub "${MediaTailorPlaybackConfigurationSampleChannel.DashConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Dash.m3u8"

  SampleChannelPlaybackHlsPlaybackUrl:
    Description: Sample Channel PlaybackURL for HLS (ts) SourceGroup
    Value: !Sub "${MediaTailorPlaybackConfigurationSampleChannel.HlsConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Hls.m3u8"

  VideoDestinationBucket:
    Value: !Ref VideoDestinationBucket

  VideoSourceBucket:
    Value: !Ref VideoSourceBucket