AWSTemplateFormatVersion: '2010-09-09'
Description: 'This SAM template will automate a FAST channel

  '
Transform: AWS::Serverless-2016-10-31
Parameters:
  AdServerUrl:
    Type: String
    Default: https://l3lk9gfqg9.execute-api.us-east-1.amazonaws.com/default/VASTEndpoint?client=1
    Description: The Ad Decision Server Url. This is used to create a Sample MediaTailor
      Ad Insertion Configuration. Default is a dummy AdServer that responds with sample
      ad creatives.
  EmailAddress:
    Type: String
    Description: The email address used for notifications
  S3BucketName:
    Type: String
    AllowedPattern: (?!(^xn--|.+-s3alias$))^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$
    ConstraintDescription: Bucket Name must follow S3 naming constraints. https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html
    Description: Name of the S3 Bucket created for video processing. This will generate
      2 buckets with a suffix derived from the StackId
  AdOffsetS3TagKeyName:
    Type: String
    Default: AdOffsets
    Description: "The name of the S3 tag key that will be used to determine a list\
      \ of ad break offsets in milliseconds. \nInclude this tag name with a value\
      \ of space (\" \") seperated list of offsets to encode your video with ad breaks.\n\
      For example: AdOffsets=30000 90000 120000\n"
    AllowedPattern: ^(?!aws:)[\u0000-\u007F\u0080-\uFFFF]{1,128}$
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
    - DEBUG
    - INFO
    - WARNING
    - ERROR
    - CRITICAL
    Description: The log level for the Lambda functions
Resources:
  MediaConvertResources:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::Serverless::Application
    Properties:
      Location: MediaConvertResources/template.yaml
      Parameters:
        StackName:
          Ref: AWS::StackName
        VideoDestinationBucket:
          Ref: VideoDestinationBucket
    Metadata:
      SamResourceId: MediaConvertResources
  XmlToDictLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.9
      SamResourceId: XmlToDictLayer
    Properties:
      CompatibleRuntimes:
      - python3.9
      ContentUri: XmlToDictLayer
  Boto3Layer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.9
      SamResourceId: Boto3Layer
    Properties:
      CompatibleRuntimes:
      - python3.9
      ContentUri: Boto3Layer
  CrHelperLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.9
      SamResourceId: CrHelperLayer
    Properties:
      CompatibleRuntimes:
      - python3.9
      ContentUri: CrHelperLayer
  MediaConvertCompleteRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaConvertFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaConvertSlatesCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaConvertTranscodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - mediaconvert.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaPackageFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - events.amazonaws.com
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  SNSFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaPackageReadS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: mediapackage.amazonaws.com
          Action: sts:AssumeRole
  MediaPackageReadSecretsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: mediapackage.amazonaws.com
          Action: sts:AssumeRole
  MediaTailorChannelCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaTailorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MediaTailorSourceLocationCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ProcessMediaStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
  SNSTopic:
    Type: AWS::SNS::Topic
  EventBridgeToToSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: SNSTopic
      Topics:
      - Ref: SNSTopic
  MediaTailorChannelCustomResourceFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      SamResourceId: MediaTailorChannelCustomResourceFunction
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaTailorChannelCustomResourceFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
      Handler: app.lambda_handler
      Layers:
      - Ref: CrHelperLayer
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaTailorChannelCustomResourceFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 30
  MediaTailorChannelCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - mediapackage-vod:*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - mediatailor:*
          Resource:
          - '*'
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaTailorSourceLocationCustomResourcePolicy
      Roles:
      - Ref: MediaTailorChannelCustomResourceFunctionRole
  MediaTailorSourceLocationCustomResourceFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      SamResourceId: MediaTailorSourceLocationCustomResourceFunction
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaTailorSourceLocationCustomResourceFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
      Handler: app.lambda_handler
      Layers:
      - Ref: CrHelperLayer
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaTailorSourceLocationCustomResourceFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 30
  MediaTailorSourceLocationCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - mediatailor:*
          Resource:
          - '*'
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaTailorSourceLocationCustomResourcePolicy
      Roles:
      - Ref: MediaTailorSourceLocationCustomResourceFunctionRole
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: EmailAddress
      Protocol: email
      TopicArn:
        Ref: SNSTopic
  VideoDestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - -output-
        - - Ref: S3BucketName
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  VideoSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - -input-
        - - Ref: S3BucketName
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  MediaConvertSlatesCustomResourceFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      SamResourceId: MediaConvertSlatesCustomResourceFunction
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaConvertSlatesCustomResourceFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
      Handler: app.lambda_handler
      Layers:
      - Ref: Boto3Layer
      - Ref: CrHelperLayer
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaConvertSlatesCustomResourceRole
        - Arn
      Runtime: python3.9
      Timeout: 300
  MediaTailorFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        - Effect: Allow
          Action:
          - mediapackage-vod:*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - mediatailor:*
          Resource:
          - '*'
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaTailorFunctionPolicy
      Roles:
      - Ref: MediaTailorFunctionRole
  MediaPackageFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${VideoDestinationBucket}/*
        - Effect: Allow
          Action:
          - mediapackage-vod:*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          - iam:GetRole
          Resource:
          - Fn::GetAtt:
            - MediaPackageReadS3Role
            - Arn
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaPackageFunctionPolicy
      Roles:
      - Ref: MediaPackageFunctionRole
  SNSFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - Ref: SNSTopic
      PolicyName:
        Fn::Sub: ${AWS::StackName}-SNSFunctionPolicy
      Roles:
      - Ref: SNSFunctionRole
  MediaTailorKMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Id: key-default-1
        Statement:
        - Sid: Enable MediaTailor Channel Assembly access to decrypt MediaPackageSecret
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - MediaTailorSourceLocationCustomResourceFunctionRole
              - Arn
          Action: kms:CreateGrant
          Resource: '*'
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
        - Sid: Allow access through AWS Secrets Manager for all principals in the
            account that are authorized to use AWS Secrets Manager
          Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:CreateGrant
          - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              kms:CallerAccount:
                Ref: AWS::AccountId
              kms:ViaService:
                Fn::Sub: secretsmanager.${AWS::Region}.amazonaws.com
        - Sid: Allow access through AWS Secrets Manager for all principals in the
            account that are authorized to use AWS Secrets Manager
          Effect: Allow
          Principal:
            AWS: '*'
          Action: kms:GenerateDataKey*
          Resource: '*'
          Condition:
            StringEquals:
              kms:CallerAccount:
                Ref: AWS::AccountId
            StringLike:
              kms:ViaService: secretsmanager.*.amazonaws.com
        - Sid: Allow direct access to key metadata to the account
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
          - kms:Describe*
          - kms:Get*
          - kms:List*
          - kms:RevokeGrant
          Resource: '*'
        Version: '2012-10-17'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
  MediaPackageReadS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetBucketLocation
          - s3:GetBucketRequestPayment
          Resource:
          - Fn::GetAtt:
            - VideoDestinationBucket
            - Arn
          - Fn::Sub: ${VideoDestinationBucket.Arn}/*
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaPackageReadS3Policy
      Roles:
      - Ref: MediaPackageReadS3Role
  MediaConvertSlatesCustomResourceFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - Fn::Sub: ${VideoDestinationBucket.Arn}/*
          - Fn::GetAtt:
            - VideoDestinationBucket
            - Arn
        - Effect: Allow
          Action:
          - lambda:*
          Resource:
          - Fn::GetAtt:
            - MediaConvertSlatesCustomResourceRole
            - Arn
        - Effect: Allow
          Action:
          - mediaconvert:*
          - mediapackage-vod:*
          - mediatailor:*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          - iam:GetRole
          Resource:
          - Fn::GetAtt:
            - MediaConvertTranscodeRole
            - Arn
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaConvertSlatesCustomResourceFunctionPolicy
      Roles:
      - Ref: MediaConvertSlatesCustomResourceRole
  MediaPackageAccessSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      KmsKeyId:
        Fn::GetAtt:
        - MediaTailorKMSKey
        - Arn
      SecretString:
        Fn::Sub:
        - '{"MediaPackageCDNIdentifier":"${Secret}"}'
        - Secret:
            Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
  MediaConvertFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectTagging
          Resource:
          - Fn::Sub: ${VideoSourceBucket.Arn}/*
        - Effect: Allow
          Action:
          - mediaconvert:*
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          - iam:GetRole
          Resource:
          - Fn::GetAtt:
            - MediaConvertTranscodeRole
            - Arn
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaConvertFunctionPolicy
      Roles:
      - Ref: MediaConvertFunctionRole
  MediaConvertTranscodePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - Fn::Sub: ${VideoSourceBucket.Arn}/*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: ${VideoDestinationBucket.Arn}/*
        - Effect: Allow
          Action: execute-api:Invoke
          Resource:
            Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaConvertTranscodePolicy
      Roles:
      - Ref: MediaConvertTranscodeRole
      - Ref: MediaConvertSlatesCustomResourceRole
  MediaTailorSecretAccessPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      ResourcePolicy:
        Statement:
        - Effect: Allow
          Principal:
            Service: mediatailor.amazonaws.com
          Action: secretsmanager:*
          Resource:
            Ref: MediaPackageAccessSecret
        - Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - MediaTailorSourceLocationCustomResourceFunctionRole
              - Arn
          Action: secretsmanager:*
          Resource:
            Ref: MediaPackageAccessSecret
        - Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - MediaPackageReadSecretsRole
              - Arn
          Action: secretsmanager:*
          Resource:
            Ref: MediaPackageAccessSecret
        Version: '2012-10-17'
      SecretId:
        Ref: MediaPackageAccessSecret
  MediaPackagePackagingGroup:
    Type: AWS::MediaPackage::PackagingGroup
    DependsOn:
    - MediaTailorKMSKey
    - MediaPackageAccessSecret
    - MediaPackageReadSecretsPolicy
    - MediaPackageReadSecretsRole
    Properties:
      Authorization:
        CdnIdentifierSecret:
          Ref: MediaPackageAccessSecret
        SecretsRoleArn:
          Fn::GetAtt:
          - MediaPackageReadSecretsRole
          - Arn
      Id:
        Fn::Sub: ${AWS::StackName}-PackagingGroup
  MediaPackageReadSecretsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:*
          Resource:
          - Ref: MediaPackageAccessSecret
        - Effect: Allow
          Action:
          - secretsmanager:ListSecrets
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - iam:PassRole
          - iam:GetRole
          Resource:
          - Fn::GetAtt:
            - MediaPackageReadSecretsRole
            - Arn
      PolicyName:
        Fn::Sub: ${AWS::StackName}-MediaPackageReadSecretsPolicy
      Roles:
      - Ref: MediaPackageReadSecretsRole
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: '08627262-05a9-4f76-9ded-b50ca2e3a84f'
          OriginRequestPolicyId: 775133bc-15f2-49f9-abea-afb2e0bf67d2
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
          TargetOriginId: MediaPackage
          ViewerProtocolPolicy: allow-all
        Enabled: true
        Origins:
        - CustomOriginConfig:
            OriginProtocolPolicy: https-only
          DomainName:
            Fn::Select:
            - 1
            - Fn::Split:
              - https://
              - Fn::GetAtt:
                - MediaPackagePackagingGroup
                - DomainName
          Id: MediaPackage
          OriginCustomHeaders:
          - HeaderName: X-MediaPackage-CDNIdentifier
            HeaderValue:
              Fn::Select:
              - 2
              - Fn::Split:
                - /
                - Ref: AWS::StackId
  MediaPackagePackagingConfigurationCmaf:
    Type: AWS::MediaPackage::PackagingConfiguration
    Properties:
      CmafPackage:
        HlsManifests:
        - ManifestName: cmaf
          AdMarkers: PASSTHROUGH
        SegmentDurationSeconds: 8
      Id:
        Fn::Sub: ${AWS::StackName}-Cmaf
      PackagingGroupId:
        Ref: MediaPackagePackagingGroup
  MediaPackagePackagingConfigurationDash:
    Type: AWS::MediaPackage::PackagingConfiguration
    Properties:
      DashPackage:
        DashManifests:
        - ManifestName: dash
        SegmentDurationSeconds: 8
      Id:
        Fn::Sub: ${AWS::StackName}-Dash
      PackagingGroupId:
        Ref: MediaPackagePackagingGroup
  MediaPackagePackagingConfigurationHls:
    Type: AWS::MediaPackage::PackagingConfiguration
    Properties:
      HlsPackage:
        HlsManifests:
        - ManifestName: hls
          AdMarkers: PASSTHROUGH
        SegmentDurationSeconds: 8
      Id:
        Fn::Sub: ${AWS::StackName}-Hls
      PackagingGroupId:
        Ref: MediaPackagePackagingGroup
  MediaTailorPlaybackConfigurationVod:
    Type: AWS::MediaTailor::PlaybackConfiguration
    Properties:
      AdDecisionServerUrl:
        Ref: AdServerUrl
      Name:
        Fn::Sub: ${AWS::StackName}-PlaybackConfiguration-Vod
      VideoContentSourceUrl:
        Fn::Sub: https://${CloudFrontDistribution.DomainName}
  MediaTailorSourceLocation:
    Type: Custom::MediaTailorSourceLocation
    DependsOn:
    - MediaTailorSourceLocationCustomResourceFunctionRole
    - MediaTailorSourceLocationCustomResourcePolicy
    Properties:
      CloudFrontDistribution:
        DomainName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        Id:
          Fn::GetAtt:
          - CloudFrontDistribution
          - Id
      MediaPackageAccessSecretArn:
        Ref: MediaPackageAccessSecret
      MediaPackagePackagingGroup:
        DomainName:
          Fn::GetAtt:
          - MediaPackagePackagingGroup
          - DomainName
        Id:
          Ref: MediaPackagePackagingGroup
      Name:
        Fn::Sub: ${AWS::StackName}-MediaTailorSourceLocation
      ServiceToken:
        Fn::GetAtt:
        - MediaTailorSourceLocationCustomResourceFunction
        - Arn
      StackName:
        Ref: AWS::StackName
  MediaTailorChannel:
    Type: Custom::MediaTailorChannel
    DependsOn:
    - MediaTailorChannelCustomResourceFunctionRole
    - MediaTailorChannelCustomResourcePolicy
    Properties:
      CloudFrontDistribution:
        DomainName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        Id:
          Fn::GetAtt:
          - CloudFrontDistribution
          - Id
      MediaPackagePackagingGroup:
        DomainName:
          Fn::GetAtt:
          - MediaPackagePackagingGroup
          - DomainName
        Id:
          Ref: MediaPackagePackagingGroup
      Name:
        Fn::Sub: ${AWS::StackName}-MediaTailorSampleChannel
      ServiceToken:
        Fn::GetAtt:
        - MediaTailorChannelCustomResourceFunction
        - Arn
      StackName:
        Ref: AWS::StackName
  MediaPackageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaPackageFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          MediaPackagePackagingGroupId:
            Ref: MediaPackagePackagingGroup
          MediaPackageReadS3RoleArn:
            Fn::GetAtt:
            - MediaPackageReadS3Role
            - Arn
          MediaTailorPlaybackConfigurationVodDash:
            Fn::GetAtt:
            - MediaTailorPlaybackConfigurationVod
            - DashConfiguration.ManifestEndpointPrefix
          MediaTailorPlaybackConfigurationVodHls:
            Fn::GetAtt:
            - MediaTailorPlaybackConfigurationVod
            - HlsConfiguration.ManifestEndpointPrefix
          MediaTailorChannelName:
            Ref: MediaTailorChannel
          StackId:
            Ref: AWS::StackId
          StackName:
            Ref: AWS::StackName
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                queue:
                - Fn::GetAtt:
                  - MediaConvertResources
                  - Outputs.QueueArn
                status:
                - COMPLETE
              source:
              - aws.mediaconvert
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaPackageFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 90
    Metadata:
      SamResourceId: MediaPackageFunction
  SNSFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: SNSFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          SnsTopicArn:
            Fn::GetAtt:
            - SNSTopic
            - TopicArn
          StackName:
            Ref: AWS::StackName
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
              - Playback URLs
              source:
              - Ref: AWS::StackName
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - SNSFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 90
    Metadata:
      SamResourceId: SNSFunction
  MediaTailorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaTailorFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          MediaTailorSourceLocation:
            Ref: MediaTailorSourceLocation
          StackId:
            Ref: AWS::StackId
          StackName:
            Ref: AWS::StackName
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                event:
                - VodAssetPlayable
              detail-type:
              - MediaPackage Input Notification
              source:
              - aws.mediapackage
      Handler: app.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaTailorFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 30
    Metadata:
      SamResourceId: MediaTailorFunction
  MediaTailorPlaybackConfigurationSampleChannel:
    Type: AWS::MediaTailor::PlaybackConfiguration
    Properties:
      AdDecisionServerUrl:
        Ref: AdServerUrl
      Name:
        Fn::Sub: ${AWS::StackName}-PlaybackConfiguration-SampleChannel
      VideoContentSourceUrl:
        Fn::GetAtt:
        - MediaTailorChannel
        - PlaybackBaseUrl
  MediaConvertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      CodeUri: MediaConvertFunction
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          AdOffsetS3TagKeyName:
            Ref: AdOffsetS3TagKeyName
          MediaConvertJobTemplate:
            Fn::GetAtt:
            - MediaConvertResources
            - Outputs.JobTemplate
          MediaConvertQueue:
            Fn::GetAtt:
            - MediaConvertResources
            - Outputs.QueueArn
          MediaConvertTranscodeRoleArn:
            Fn::GetAtt:
            - MediaConvertTranscodeRole
            - Arn
          StackId:
            Ref: AWS::StackId
          StackName:
            Ref: AWS::StackName
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                bucket:
                  name:
                  - Ref: VideoSourceBucket
              detail-type:
              - Object Created
              - Object Tagging
              source:
              - aws.s3
      Handler: app.lambda_handler
      Layers:
      - Ref: Boto3Layer
      - Ref: XmlToDictLayer
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MediaConvertFunctionRole
        - Arn
      Runtime: python3.9
      Timeout: 30
    Metadata:
      SamResourceId: MediaConvertFunction
  MediaConvertSlate30s:
    Type: Custom::MediaConvertSlates
    DependsOn:
    - MediaPackageFunction
    - MediaTailorFunction
    - MediaTailorSourceLocationCustomResourceFunction
    - MediaTailorSourceLocationCustomResourcePolicy
    - MediaConvertSlatesCustomResourceFunctionPolicy
    - MediaConvertSlatesCustomResourceRole
    - MediaTailorSourceLocation
    - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name:
          Fn::GetAtt:
          - MediaConvertResources
          - Outputs.JobTemplate
      MediaConvertTranscodeRoleArn:
        Fn::GetAtt:
        - MediaConvertTranscodeRole
        - Arn
      ServiceToken:
        Fn::GetAtt:
        - MediaConvertSlatesCustomResourceFunction
        - Arn
      SlateDurationInMillis: 30000
      StackName:
        Ref: AWS::StackName
      VideoDestinationBucket:
        Ref: VideoDestinationBucket
  MediaConvertSlate15s:
    Type: Custom::MediaConvertSlates
    DependsOn:
    - MediaPackageFunction
    - MediaTailorFunction
    - MediaTailorSourceLocationCustomResourceFunction
    - MediaTailorSourceLocationCustomResourcePolicy
    - MediaConvertSlatesCustomResourceFunctionPolicy
    - MediaConvertSlatesCustomResourceRole
    - MediaTailorSourceLocation
    - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name:
          Fn::GetAtt:
          - MediaConvertResources
          - Outputs.JobTemplate
      MediaConvertTranscodeRoleArn:
        Fn::GetAtt:
        - MediaConvertTranscodeRole
        - Arn
      MediaPackagePackagingGroup:
        DomainName:
          Fn::GetAtt:
          - MediaPackagePackagingGroup
          - DomainName
        Id:
          Ref: MediaPackagePackagingGroup
      ServiceToken:
        Fn::GetAtt:
        - MediaConvertSlatesCustomResourceFunction
        - Arn
      SlateDurationInMillis: 15000
      StackName:
        Ref: AWS::StackName
      VideoDestinationBucket:
        Ref: VideoDestinationBucket
  MediaConvertSlate20s:
    Type: Custom::MediaConvertSlates
    DependsOn:
    - MediaPackageFunction
    - MediaTailorFunction
    - MediaTailorSourceLocationCustomResourceFunction
    - MediaTailorSourceLocationCustomResourcePolicy
    - MediaConvertSlatesCustomResourceFunctionPolicy
    - MediaConvertSlatesCustomResourceRole
    - MediaTailorSourceLocation
    - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name:
          Fn::GetAtt:
          - MediaConvertResources
          - Outputs.JobTemplate
      MediaConvertTranscodeRoleArn:
        Fn::GetAtt:
        - MediaConvertTranscodeRole
        - Arn
      MediaPackagePackagingGroup:
        DomainName:
          Fn::GetAtt:
          - MediaPackagePackagingGroup
          - DomainName
        Id:
          Ref: MediaPackagePackagingGroup
      ServiceToken:
        Fn::GetAtt:
        - MediaConvertSlatesCustomResourceFunction
        - Arn
      SlateDurationInMillis: 20000
      StackName:
        Ref: AWS::StackName
      VideoDestinationBucket:
        Ref: VideoDestinationBucket
  MediaConvertSlate25s:
    Type: Custom::MediaConvertSlates
    DependsOn:
    - MediaPackageFunction
    - MediaTailorFunction
    - MediaTailorSourceLocationCustomResourceFunction
    - MediaTailorSourceLocationCustomResourcePolicy
    - MediaConvertSlatesCustomResourceFunctionPolicy
    - MediaConvertSlatesCustomResourceRole
    - MediaTailorSourceLocation
    - MediaTailorFunctionTriggerPermission
    Properties:
      MediaConvertJobTemplate:
        Name:
          Fn::GetAtt:
          - MediaConvertResources
          - Outputs.JobTemplate
      MediaConvertTranscodeRoleArn:
        Fn::GetAtt:
        - MediaConvertTranscodeRole
        - Arn
      MediaPackagePackagingGroup:
        DomainName:
          Fn::GetAtt:
          - MediaPackagePackagingGroup
          - DomainName
        Id:
          Ref: MediaPackagePackagingGroup
      ServiceToken:
        Fn::GetAtt:
        - MediaConvertSlatesCustomResourceFunction
        - Arn
      SlateDurationInMillis: 25000
      StackName:
        Ref: AWS::StackName
      VideoDestinationBucket:
        Ref: VideoDestinationBucket
Outputs:
  SampleChannelPlaybackCmafPlaybackUrl:
    Description: Sample Channel PlaybackURL for (hls) CMAF SourceGroup
    Value:
      Fn::Sub: ${MediaTailorPlaybackConfigurationSampleChannel.HlsConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Cmaf.m3u8
  SampleChannelPlaybackDashPlaybackUrl:
    Description: Sample Channel PlaybackURL for DASH SourceGroup
    Value:
      Fn::Sub: ${MediaTailorPlaybackConfigurationSampleChannel.DashConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Dash.m3u8
  SampleChannelPlaybackHlsPlaybackUrl:
    Description: Sample Channel PlaybackURL for HLS (ts) SourceGroup
    Value:
      Fn::Sub: ${MediaTailorPlaybackConfigurationSampleChannel.HlsConfiguration.ManifestEndpointPrefix}${AWS::StackName}-Hls.m3u8
  VideoDestinationBucket:
    Value:
      Ref: VideoDestinationBucket
  VideoSourceBucket:
    Value:
      Ref: VideoSourceBucket
